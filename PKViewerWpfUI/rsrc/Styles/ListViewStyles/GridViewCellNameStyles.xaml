<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Стиль стэкпанели для иконок-->
    <Style x:Key="StackPanelStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="Margin" Value="0 0 2 0"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Tag" Value="{StaticResource ColorlessBrush}"/>
        <!--Триггеры стиля-->
        <Style.Triggers>
            <!--Триггер если мышь над стэкпанелью-->
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Tag" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=ListViewItem}}"/>
                <Setter Property="Background" Value="{DynamicResource MainPanelBgBrush}"/>
            </DataTrigger>
            <!--Триггер если мышь над стэкпанелью и строка выделена-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource RightPanelBgBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!--Стиль бордера для иконки Сертификата-->
    <Style x:Key="BorderCertStyle" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsCertPresent, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="True">
                <Setter Property="Tag" Value="{StaticResource IconGreenBrush}"/>
                <Setter Property="Background" Value="{StaticResource IconYellowBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsCertPresent, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="False">
                <Setter Property="Tag" Value="{StaticResource IconGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsCertPresent, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="{x:Null}">
                <Setter Property="Tag" Value="{StaticResource IconDisabledGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Стиль бордера для иконки IsEncrypted-->
    <Style x:Key="BorderEncryptedStyle" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsEncrypted, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="True">
                <Setter Property="Tag" Value="{StaticResource IconGreenBrush}"/>
                <Setter Property="Background" Value="{StaticResource IconYellowBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsEncrypted, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="False">
                <Setter Property="Tag" Value="{StaticResource IconGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsEncrypted, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="{x:Null}">
                <Setter Property="Tag" Value="{StaticResource IconDisabledGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Стиль бордера для иконки IsExportable-->
    <Style x:Key="BorderExportableStyle" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsExportable, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="True">
                <Setter Property="Tag" Value="{StaticResource IconGreenBrush}"/>
                <Setter Property="Background" Value="{StaticResource IconYellowBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsExportable, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="False">
                <Setter Property="Tag" Value="{StaticResource IconGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsExportable, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="{x:Null}">
                <Setter Property="Tag" Value="{StaticResource IconDisabledGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Стиль бордера для иконки IsDeleted-->
    <Style x:Key="BorderDeletedStyle" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsDeleted, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="True">
                <Setter Property="Tag" Value="{StaticResource IconRedBrush}"/>
                <Setter Property="Background" Value="{StaticResource IconYellowBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsDeleted, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="False">
                <Setter Property="Tag" Value="{StaticResource IconGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding DataContext.NameHolder.IsDeleted, RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                Value="{x:Null}">
                <Setter Property="Tag" Value="{StaticResource IconDisabledGrayBrush}"/>
                <Setter Property="Background" Value="{StaticResource ColorlessBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>